Getting started
###############

Genode can be approached from two different angles: as an operating-system
architecture and as a practical tool kit. This chapter assists you with
exploring Genode as the latter. After introducing the recommended
development environment in Section [Recommended development environment],
it guides you through the steps needed to obtain the source code
(Section [Obtaining the source code]), to use the tool chain
(Section [Using the build system]), to test-drive system scenarios
(Section [A simple system scenario]), and to create your first custom
component from scratch (Section [Hello world]).


Recommended development environment
-----------------------------------

Genode is regularity used and developed on GNU/Linux. It is recommended to
use the latest long-term support (LTS) version of Ubuntu. Make sure that your
installation satisfies the following requirements:

* GNU Make version 3.81 (or newer) needed by the build system,
* _libSDL-dev_ needed to run system scenarios directly on Linux,
* _tclsh_ and _expect_ needed by test-automation and work-flow tools,
* _qemu_ and _genisoimage_ needed for testing system scenarios on non-Linux
  platforms via the Qemu emulator.

For using the entire collection of ported 3rd-party software, the following
packages should be installed additionally:
_byacc_, _autoconf2.64_, _autogen_, _bison_, _flex_, _g++_, _git_, _gperf_,
_libxml2-utils_, _subversion_, and _xsltproc_.


Seeking help
------------

The best way to get assistance while exploring Genode is to consult the
mailing list, which is the primary communication medium of regular
users and developers alike. Please feel welcome to join in!

:Mailing Lists:

  [http://genode.org/community/mailing-lists]

If you encounter a new bug, ambiguous documentation, or a missing feature,
please consider opening a corresponding issue at the issue tracker:

:Issue tracker:

  [https://github.com/genodelabs/genode/issues]


Obtaining the source code
=========================

The centerpiece of Genode is the source code found within the official Git
repository:

:Source code at GitHub:

  [https://github.com/genodelabs/genode]

To obtain the source code, clone the Git repository:

! git clone https://github.com/genodelabs/genode.git

After cloning, you can find the source code within
the _genode/_ directory. In the following, we refer to this directory
as _<genode-dir>_.


Source-tree structure
~~~~~~~~~~~~~~~~~~~~~


Top-level directory
-------------------

At the root of the directory tree, there is the following content:

:_doc/_: Documentation in plain text format, including the
  release notes
  of all versions. _Practical hint:_ The comprehensive release notes
  conserve most of the hands-on documentation aggregated over the lifetime
  of the project. When curios about a certain topic, it is often worthwhile to
  "grep" for the topic within the release notes to get a starting point
  for investigation.

:_tool/_: Tools and scripts to support the build system, various boot loaders,
  the tool chain, and the management of 3rd-party source code. Please find
  more information in the _README_ file contained in the subdirectory.

:_repos/_: The so-called source-code repositories, which contain the actual
  source code of the framework components. The source code is not organized
  within a single source tree but multiple trees. Each tree is called a
  _source-code repository_ and has the same principle structure.
  At build time, a set of source-code repositories can be selected to be
  incorporated into the build process. Thereby, the source-code repositories
  provide a coarse-grained modularization of the framework.


Repositories overview
---------------------

The _<genode-dir>/repos/_ directory contains the following source-code
repositories.

:_base/_:

  The fundamental framework interfaces as well as the platform-agnostic parts
  of the core component (Section [Core - the root of the component tree]).

:_base-<platform>/_:
  Platform-specific supplements of the _base/_ repository where _<platform>_
  corresponds to one of the following:

  :_linux_:

    Linux kernel (both x86_32 and x86_64).

  :_nova_:

    NOVA microhypervisor.
    More information about the NOVA platform is provided by Section
    [Execution on the NOVA microhypervisor (base-nova)].

  :_hw_:

    The hw platform allows the execution of Genode on bare ARM hardware
    without the need for a separate kernel. The kernel functionality is
    included in the core component. More information about the hw platform
    can be found in Section [Execution on bare hardware (base-hw)].

  :_foc_:

    Fiasco.OC is a modernized version of the L4/Fiasco microkernel with a
    completely revised kernel interface fostering capability-based
    security.

  :_okl4_:

    OKL4 kernel originally developed at Open-Kernel-Labs.

  :_pistachio_:

    L4ka::Pistachio kernel developed at University of Karlsruhe.

  :_fiasco_:

    L4/Fiasco kernel originally developed at University of Technology Dresden.

  :_codezero_:

    Codezero microkernel originally developed by B-Labs.

:_os/_:

  OS components such as the init component, device drivers, and basic system
  services.

:_demo/_:

  Various services and applications used for demonstration purposes, for
  example the graphical application launcher and the tutorial browser
  described in Section [A simple system scenario].

:_hello_tutorial/_:

  Tutorial for creating a simple client-server scenario. This
  repository includes documentation and the complete source code.

:_libports/_:

  Ports of popular open-source libraries, most importantly the C library.
  Among the 3rd-party libraries are Qt5, libSDL, freetype, Python, ncurses,
  Mesa, and libav.

:_dde_linux/_:

  Device-driver environment for executing Linux kernel subsystems as
  user-level components. Among the subsystems are the USB stack, the
  Intel wireless stack, and the TCP/IP stack.

:_dde_ipxe/_:

  Device-driver environment for executing network drivers of the iPXE project.

:_dde_oss/_:

  Device-driver environment for the audio drivers of the Open Sound System.

:_dde_rump/_:

  Port of rump kernels, which are used to execute subsystems of the NetBSD
  kernel as user-level components.
  The repository contains a server that uses a rump kernel to provide
  various NetBSD file systems.

:_ports/_:

  Ports of 3rd-party applications.

:_ports-<platform>/_:

  These platform-specific source-code repositories contain software that
  capitalizes special features of the respective kernel platform.
  For the Fiasco.OC platform, 'ports-foc' hosts a port of the L4Linux
  kernel.

:_gems/_:

  Components that use
  both native Genode interfaces as well as features of other high-level
  repositories, in particular shared libraries provided by _libports/_.


Downloading 3-rd party source code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



Using the build system
======================

Genode relies on a custom tool chain, which can be downloaded at the following
website:

:Tool chain:

  [http://genode.org/download/tool-chain]


Build directory
---------------

The build system never touches the source tree but generates object
files, libraries, and programs in a dedicated build directory. We do not have a
build directory yet. For a quick start, let us create one using the following
command:

! cd <genode-dir>
! ./tool/create_builddir linux_x86

The command creates a new build directory at 'build/linux_x86'. The build
directory is readily configured for using GNU/Linux as base platform.


Build configuration
-------------------

Before using the build directory, it is recommended to revisit and
possibly adjust the build configuration, which is contained in the
_etc/_ subdirectory of the build directory, e.g., _build/linux_x86/etc/_.
The _build.conf_ file contains global build parameters, in particular
the selection of source-code repositories to be incorporated. It is also
a suitable place for adding global build options. For example, for
enabling GNU make to use 4 CPU cores, add the following line to the
_build.conf_ file:

! MAKE += -j4


Building components
-------------------

The receipt for building a component has the form of a _target.mk_ file
within the _src/_ directory of one of the source-code repositories.
For example, the _target.mk_ file of the init component is located
at _<genode-dir>/repos/os/src/init/target.mk_. To build the component, execute
the following command from within the build directory:

! make init

The argument "init" refers to the path relative to the _src/_ subdirectory.
The build system determines and builds all targets found under this path in
all source-code repositories.
After the build is completed, the resulting executable binary can be found
in a subdirectory that matches the target's path. Additionally, the build
system installs a symbolic link in the _bin/_ subdirectory that points to the
executable binary.

If the specified path contains multiple _target.mk_ files in different
subdirectories, the build system builds all of them. For example, the
following command builds all targets found within one of the
_<repo>/src/drivers/_ subdirectories:

! make drivers

Furthermore, it is possible to specify multiple targets at once. The following
command builds both the init component and the timer driver:

! make init drivers/timer


A simple system scenario
========================

;To give Genode a try, build and execute a simple demo scenario via:

;* Executing a simple system scenario
;  * Linux
;  * Microkernel


Hello world
===========

;* Tutorial for building a hello-world program


